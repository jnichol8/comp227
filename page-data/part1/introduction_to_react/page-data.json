{"componentChunkName":"component---src-templates-content-template-js","path":"/part1/introduction_to_react","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>We will now start getting familiar with probably the most important topic of this course, namely the <a href=\"https://reactjs.org/\">React</a> library.\nLet's start by making a simple React application as well as getting to know the core concepts of React.</p>\n<p>The easiest way to get started by far is by using a tool called <a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>.\nIt is possible (but not necessary) to install <em>create-react-app</em> on your machine if the <em>npm</em> tool that was installed along with Node has a version number of at least <em>5.3</em>.</p>\n<p>First, visit the classroom link: <a href=\"http://go.djosv.com/227lab1\">http://go.djosv.com/227lab1</a>\nand use the steps outlined <a href=\"/part0/configuring_your_machine_for_this_course\">from part 0c</a> to\n<a href=\"https://imgur.com/5Tv7mVM\">accept</a>, <a href=\"https://imgur.com/UDQXB6V\">download</a> and set up the repository from within WebStorm.\nThe only different step in our <a href=\"/part0/configuring_your_machine_for_this_course#8-connect-webstorm-with-github\">high-level checklist</a>\nis that in step 3 we need to do is say <strong><em>File->New Project from Version Control</em></strong> from within WebStorm to open the URL prompt.</p>\n<p>I would also make sure to check <strong>trust projects</strong> that is presented in the first window so that you don't have to keep doing so.\n<picture><img src=\"/static/6903de9eda70006b2862f3de840a4d93/9f21b/trust_projects.png\" alt=\"clicking trust projects\" srcset=\"/static/6903de9eda70006b2862f3de840a4d93/772e8/trust_projects.png 200w,\n/static/6903de9eda70006b2862f3de840a4d93/e17e5/trust_projects.png 400w,\n/static/6903de9eda70006b2862f3de840a4d93/9f21b/trust_projects.png 706w\" sizes=\"(max-width: 706px) 100vw, 706px\"></picture></p>\n<p>Lastly, I would choose the option <strong><em>New Window</em></strong> and check <strong><em>don't ask again</em></strong> in the next window.\nUsing a new window with the project will provide you with a new window for every project.\nHaving a new window is nice for having a separate area but not being confined to having only one project open at a time.\nI liked using attach, which puts all the repos in a single folder.\nHowever, this creates more issues in particular views like the git view as it shows you all the same files and you have to keep making sure you have the right path.\n<picture><img src=\"/static/573fa9bd5a794b9e78a8feaefdba5458/41d3b/attach_dont_ask.png\" alt=\"new window and don&#x27;t ask again\" srcset=\"/static/573fa9bd5a794b9e78a8feaefdba5458/772e8/attach_dont_ask.png 200w,\n/static/573fa9bd5a794b9e78a8feaefdba5458/e17e5/attach_dont_ask.png 400w,\n/static/573fa9bd5a794b9e78a8feaefdba5458/41d3b/attach_dont_ask.png 774w\" sizes=\"(max-width: 774px) 100vw, 774px\"></picture></p>\n<p>You can click on the <a href=\"../../images/1/custom/webstorm_project.png\">project bar in the upper right</a> to return to see that you should now have two sets of folders: <em>lab0</em> and <em>lab1</em>.</p>\n<p>You can now right-click on lab1 and select <strong>Open in->Terminal</strong>.\nIf you did not review the <a href=\"/part0/configuring_your_machine_for_this_course#some-git-command-line-tools\">part 0c's coverage of git commands and the terminal</a>,\nit might make sense to do so now.</p>\n<p>With your terminal now open you can type the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">npx create-react-app reading\n<span class=\"token builtin class-name\">cd</span> reading</code></pre></div>\n<p>Say yes to any prompts that appear asking you to update or that ask you to allow access.</p>\n<p>Once you are in the reading directory, start our application by typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> start</code></pre></div>\n<p>By default, the application runs on localhost port 3000 with the address <a href=\"http://localhost:3000\">http://localhost:3000</a></p>\n<p>Your default browser should launch automatically.\nOpen the browser console (<strong><em>Ctrl-Shift-I</em></strong>) <strong>immediately</strong>.\nAlso, open a text editor so that you can view the code as well as the webpage at the same time on the screen:</p>\n<picture><img src=\"/static/969159e7918835feb10449c0b96b3142/5a190/1e.png\" alt=\"code and browser side by side\" srcset=\"/static/969159e7918835feb10449c0b96b3142/772e8/1e.png 200w,\n/static/969159e7918835feb10449c0b96b3142/e17e5/1e.png 400w,\n/static/969159e7918835feb10449c0b96b3142/5a190/1e.png 800w,\n/static/969159e7918835feb10449c0b96b3142/c1b63/1e.png 1200w,\n/static/969159e7918835feb10449c0b96b3142/29007/1e.png 1600w,\n/static/969159e7918835feb10449c0b96b3142/719d0/1e.png 1779w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You can collapse lab0 and close the README.md from that lab that we had from the previous folder.\nBecause we attached the projects, you'll need to make sure that you are editing the correct file, which you can check in the upper left breadcrumb trail.</p>\n<p>The code of the application resides in the <em>reading/src</em> folder.\nLet's simplify the default code such that the contents of the file <em>index.js</em> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and file <em>App.js</em> looks like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>You may delete the files:</p>\n<ul>\n<li><em>App.css</em></li>\n<li><em>App.test.js</em></li>\n<li><em>index.css</em></li>\n<li><em>logo.svg</em></li>\n<li><em>reportWebVitals.js</em></li>\n<li><em>setupTests.js</em></li>\n</ul>\n<p>as they are not needed in our application right now.\nIf you use safe delete, you should not see any warnings about the files being used.</p>\n<p>If you do see warnings, then you way want to read <a href=\"/part1/a_more_complex_state_debugging_react_apps/#old-react\">this future section about react version differences</a>.</p>\n<h3>Component</h3>\n<p>The file <em>App.js</em> now defines a <a href=\"https://reactjs.org/docs/components-and-props.html\">React component</a> with the name <code class=\"language-text\">App</code>.\nThe command on the final line of file <em>index.js</em>, namely:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>renders its contents into the file <em>public/index.html</em>, inside a <code class=\"language-text\">div</code> element that has the <code class=\"language-text\">id</code> value 'root'.</p>\n<p>By default, the file <em>public/index.html</em> doesn't contain any HTML markup that is visible to us in the browser.\nYou can try adding some HTML to the file.\nHowever, when using React, all content that needs to be rendered is usually defined as React components.</p>\n<p>Let's take a closer look at the code defining the component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>As you probably guessed, the component will be rendered as a <code class=\"language-text\">div</code> tag, which wraps a <code class=\"language-text\">p</code> tag containing the text <code class=\"language-text\">Hola COMP 227!</code>.</p>\n<p>Technically the component is defined as a JavaScript function.\nThe following is a function (which does not receive any parameters):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The function is then assigned to a constant variable <code class=\"language-text\">App</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token operator\">...</span></code></pre></div>\n<p>There are a few ways to define functions in JavaScript.\nHere we will use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">arrow functions</a>,\nwhich are described in a newer version of JavaScript known as <a href=\"http://es6-features.org/#Constants\">ECMAScript 6</a>, also called ES6.</p>\n<p>Because the function consists of only a single expression we have used a shorthand, which represents this piece of code:</p>\n<table>\n<thead>\n<tr>\n<th>original shorthand</th>\n<th>long form</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><pre><code class=\"languagejs\">const App = () => (<br><br>  &#x3C;div><br>    &#x3C;p>Hola COMP 227!&#x3C;/p><br>  &#x3C;/div><br><br>)<br></td>\n<td><pre><code class=\"languagejs\">const App = () => {<br>  return (<br>    &#x3C;div><br>      &#x3C;p>Hola COMP 227!&#x3C;/p><br>    &#x3C;/div><br>  )<br>}</td>\n</tr>\n</tbody>\n</table>\n<p><strong>Notice the return and curly braces instead of parenthesis</strong>!\nIn other words, the function returns the value of the expression.</p>\n<p>The function defining the component may contain any kind of JavaScript code.\nModify your component to be as follows and observe what happens in the developer tool's console: (I'll refer to this as the <strong>console</strong> from here on out.)</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello from component'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It is also possible to render dynamic content inside of a component.</p>\n<p>Modify the component as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span> It is <span class=\"token punctuation\">{</span>now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> plus <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span> is <span class=\"token punctuation\">{</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Any JavaScript code within the curly braces is evaluated and the result of this evaluation is embedded into the defined place in the HTML produced by the component.</p>\n<h3>JSX</h3>\n<p>It seems like React components are returning HTML markup.\nHowever, this is not the case.\nThe layout of React components is mostly written using <a href=\"https://reactjs.org/docs/introducing-jsx.html\">JSX</a>.\nAlthough JSX looks like HTML, we are dealing with a way to write JavaScript.\nUnder the hood, JSX returned by React components is compiled into JavaScript.</p>\n<p>After compiling, our application looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token number\">24</span>\n  <span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'div'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hola COMP 227! It is '</span><span class=\"token punctuation\">,</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>\n      <span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token string\">' plus '</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token string\">' is '</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compilation is handled by <a href=\"https://babeljs.io/repl/\">Babel</a>.\nProjects created with <em>create-react-app</em> are configured to compile automatically.\nWe will learn more about this topic in <a href=\"/part7\">part 7</a> of this course.</p>\n<p>It is also possible to write React as \"pure JavaScript\" without using JSX.\nJust like it's possible to chisel one of your programs from undergrad into a stone tablet. In either case, I wouldn't recommend it.</p>\n<p>In practice, JSX is much like HTML with the distinction that with JSX you can easily embed dynamic content by writing appropriate JavaScript within curly braces.\nThe idea of JSX is quite similar to many templating languages, such as Thymeleaf used along with Java Spring, which are used on servers.</p>\n<p>JSX is \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction\">XML</a>-like\", which means that every tag needs to be closed.\nFor example, a newline is an empty element, which in HTML can be written as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>but when writing JSX, the tag needs to be closed:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<h3>Multiple components</h3>\n<p>Let's modify the file <em>App.js</em> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hola <span class=\"token constant\">COMP</span> <span class=\"token number\">227</span><span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>(Notice <code class=\"language-text\">export</code> at the bottom is left out in these <em>examples</em>, now and in the future.\nWe still need <strong><code class=\"language-text\">export</code> for the code to work.</strong>)</p>\n<p>We have defined a new component <code class=\"language-text\">Greet</code> and used it inside the component <code class=\"language-text\">App</code>.\nNaturally, a component can be used multiple times:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Writing components with React is easy, and by combining components, even a more complex application can be kept fairly maintainable.\nIndeed, a core philosophy of React is composing applications from many specialized reusable components.</p>\n<p>Another strong convention is the idea of a <strong>root component</strong> called <code class=\"language-text\">App</code> at the top of the component tree of the application.\nNevertheless, as we will learn in <a href=\"/part6\">part 6</a>,\nthere are situations where the component <code class=\"language-text\">App</code> is not exactly the root, but is wrapped within an appropriate utility component.</p>\n<h3>props: passing data to components</h3>\n<p>It is possible to pass data to components using so-called <a href=\"https://reactjs.org/docs/components-and-props.html\">props</a>.</p>\n<p>Let's modify the component <code class=\"language-text\">Greet</code> as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Hi <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now the function defining the component has a parameter <strong>props</strong>.\nAs an argument, the parameter receives an object, which has fields corresponding to all the \"props\" the user of the component defines.</p>\n<p>The props are defined as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Luna'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Jordan'</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>There can be an arbitrary number of props and their values can be <em>hard-coded</em> strings or the results of JavaScript expressions.\nIf the value of the prop is achieved using JavaScript it must be wrapped with curly braces.</p>\n<p>Let's modify the code so that the component <code class=\"language-text\">Greet</code> uses two props:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Greet</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">        Hi <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> you are <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">}</span> years old</span>      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Buddy'</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The props sent by the component <code class=\"language-text\">App</code> are the values of the variables, the result of the evaluation of the sum expression and a regular string.</p>\n<h3>Some tips</h3>\n<p>React generates helpful error messages.\nDespite this, you should, at least in the beginning, advance in <strong>very small steps</strong> and make sure that every change works as desired.</p>\n<p><strong>The console should always be open</strong>.\nIf the browser reports errors, don't continue writing more code, hoping for miracles.\nYou should instead try to understand the cause of the error and, for example, go back to the previous working state:</p>\n<picture><img src=\"/static/d37366f6bf8d64e0bdfada305370d3f1/5a190/2a.png\" alt=\"screenshot of undefined prop error\" srcset=\"/static/d37366f6bf8d64e0bdfada305370d3f1/772e8/2a.png 200w,\n/static/d37366f6bf8d64e0bdfada305370d3f1/e17e5/2a.png 400w,\n/static/d37366f6bf8d64e0bdfada305370d3f1/5a190/2a.png 800w,\n/static/d37366f6bf8d64e0bdfada305370d3f1/c1b63/2a.png 1200w,\n/static/d37366f6bf8d64e0bdfada305370d3f1/29007/2a.png 1600w,\n/static/d37366f6bf8d64e0bdfada305370d3f1/9c6a1/2a.png 1869w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>While using undo (<strong><em>Ctrl-Z</em></strong>) and redo (<strong><em>Ctrl-Y</em></strong>) is great,\nif you commit often, looking at changes becomes even easier,\nas you could always look at the previously recorded changes on any line.</p>\n<p>It is good to remember that in React it is possible and worthwhile to write <code class=\"language-text\">console.log()</code> commands (which print to the console) within your code.</p>\n<p>Also, keep in mind that <strong>React component names must be capitalized</strong>.\nIf you try defining a component as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">footer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      greeting app created by <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">'https://github.com/onzfonz'</span><span class=\"token operator\">></span>onzfonz<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>and use it like this</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">&lt;</span>footer <span class=\"token operator\">/</span><span class=\"token operator\">></span></span>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the page is not going to display the content defined within the Footer component,\nand instead React only creates an empty <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer\">footer</a> element,\ni.e. the built-in HTML element instead of the custom React element of the same name.\nIf you change the first letter of the component name to a capital letter,\nthen React creates a <code class=\"language-text\">div</code> element defined in the <code class=\"language-text\">Footer</code> component, which is rendered on the page.</p>\n<p>Notice that the content of a React component (usually) needs to contain <strong>one root element</strong>.\nIf we, for example, try to define the component <code class=\"language-text\">App</code> without the outermost <code class=\"language-text\">div</code> element:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>the result is an error message.</p>\n<picture><img src=\"/static/6a117a0b7304a312d68e3f0ebf2cad8a/5754a/3c.png\" alt=\"multiple root elements error screenshot\" srcset=\"/static/6a117a0b7304a312d68e3f0ebf2cad8a/772e8/3c.png 200w,\n/static/6a117a0b7304a312d68e3f0ebf2cad8a/e17e5/3c.png 400w,\n/static/6a117a0b7304a312d68e3f0ebf2cad8a/5754a/3c.png 613w\" sizes=\"(max-width: 613px) 100vw, 613px\"></picture>\n<p>Using a root element is not the only working option.\nAn <em>array</em> of components is also a valid solution:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, when defining the root component of the application this is not a particularly wise thing to do, and it makes the code look a bit ugly.</p>\n<p>Because the root element is stipulated, we have \"extra\" div elements in the DOM tree.\nThis can be avoided by using <a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">fragments</a>,\ni.e. by wrapping the elements to be returned by the component with an empty element:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Buddy'</span>\n  <span class=\"token keyword\">const</span> age <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>Greetings<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token string\">'Bailey'</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">7</span> <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Greet name<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span> age<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Footer <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>It now compiles successfully, and the DOM generated by React no longer contains the extra div element.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 1.1-1.2</h3>\n<p>The exercises are submitted through GitHub and marking them as done on Canvas.</p>\n<p>You should submit the exercises in each part with the corresponding repo that is mentioned.\nIn this case, you will use the repo that was generated from <a href=\"http://go.djosv.com/227lab1\">http://go.djosv.com/227lab1</a>.</p>\n<p>We will use the following file structure for our submission repository:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">lab1\n  reading\n  arcadeinfo\n  studytracker\n  jokes</code></pre></div>\n<p>Each repo will need directories that will be used for an application that will be linked to a series of exercises, like \"studytracker\" for part 1.</p>\n<p>We have provided you with a fairly robust .gitignore file, which ignores things like the <em>node_modules</em> directory,\nso you should commit and add all of the files that you use in your directories.\n<strong><em>Make sure to remove any files you won't use before committing them!</em></strong></p>\n<p>Please make sure that you commit often, as that will be the way you show your work and progress through the course.</p>\n<p>Notice that in this part, there are more exercises besides those found below.</p>\n<h4>1.1: handheld arcade info, step1</h4>\n<p>This exercise will start the ongoing development of a small application that will be further developed in a few of the following exercises.\nPlease make sure to commit often.</p>\n<p>Use <em>create-react-app</em> in the base folder of lab1 to initialize a new application called <strong>arcadeinfo</strong>.\nMake sure that when you type <code class=\"language-text\">ls</code>, you see both the <em>reading</em> and <em>arcadeinfo</em> folders.\nModify <em>index.js</em> to match the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom/client'</span>\n\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App'</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">createRoot</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>and <em>App.js</em> to match the following</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> company <span class=\"token operator\">=</span> <span class=\"token string\">'Nintendo'</span>\n  <span class=\"token keyword\">const</span> handheld1 <span class=\"token operator\">=</span> <span class=\"token string\">'Game Boy'</span>\n  <span class=\"token keyword\">const</span> games1 <span class=\"token operator\">=</span> <span class=\"token number\">1046</span>\n  <span class=\"token keyword\">const</span> handheld2 <span class=\"token operator\">=</span> <span class=\"token string\">'Game Boy Advance'</span>\n  <span class=\"token keyword\">const</span> games2 <span class=\"token operator\">=</span> <span class=\"token number\">1538</span>\n  <span class=\"token keyword\">const</span> handheld3 <span class=\"token operator\">=</span> <span class=\"token string\">'DS'</span>\n  <span class=\"token keyword\">const</span> games3 <span class=\"token operator\">=</span> <span class=\"token number\">1791</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part1<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games1<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part2<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games2<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>part3<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>games3<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>Number <span class=\"token keyword\">of</span> games <span class=\"token punctuation\">{</span>games1 <span class=\"token operator\">+</span> games2 <span class=\"token operator\">+</span> games3<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App</code></pre></div>\n<p>and remove extra files (<em>App.css</em>, <em>App.test.js</em>, <em>index.css</em>, <em>logo.svg</em>, <em>setupTests.js</em>, <em>reportWebVitals.js</em>)).</p>\n<p>Unfortunately, the entire application is in the same component.\nRefactor the code so that it consists of three new components: <code class=\"language-text\">Header</code>, <code class=\"language-text\">Content</code>, and <code class=\"language-text\">Total</code>.\nAll data still resides in the <code class=\"language-text\">App</code> component, which passes the necessary data to each component using <code class=\"language-text\">props</code>.\n<code class=\"language-text\">Header</code> takes care of rendering the name of the course,\n<code class=\"language-text\">Content</code> renders the parts and their number of exercises and <code class=\"language-text\">Total</code> renders the total number of exercises.</p>\n<p>Define the new components in the file <em>App.js</em>.</p>\n<p>The <code class=\"language-text\">App</code> component's body will approximately be as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// const-definitions</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Header company<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>company<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Content <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Total <span class=\"token operator\">...</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>WARNING</strong> make sure that you are back in the base portion of your directory before you use <code class=\"language-text\">create-react-app</code>.\nCalling it from inside our repo will do what we want.\nIf we call it outside of our repo it will automatically make the project a git repository, which we don't want!</p>\n<h4>1.2: handheld arcade info, step2</h4>\n<p>Refactor the <code class=\"language-text\">Content</code> component so that it does not render any names of handhelds or their number of games by itself.\nInstead, it only renders three <code class=\"language-text\">Handheld</code> components of which each renders the name and number of games of one handheld.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> Content <span class=\"token operator\">=</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>Handheld <span class=\"token operator\">...</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Our application passes on information in quite a primitive way at the moment, since it is based on individual variables.\nThis situation will improve soon.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/83f1c8a7795e9e8eaffaec29b1ee79b1/part-1.svg"},"part":1,"letter":"a","lang":"en"}}},"pageContext":{"part":1,"letter":"a","lang":"en"}}}