{"componentChunkName":"component---src-templates-content-template-js","path":"/part0/fundamentals_of_web_apps","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before we start programming, we will go through some principles of web development by examining an example application at <strong><a href=\"https://227demo.djosv.com\">https://227demo.djosv.com</a></strong>.</p>\n<p>The application exists only to demonstrate some basic concepts of the course,\nand is, by no means, an example of <em>how</em> a modern web application should be made.\nOn the contrary, it demonstrates some old techniques of web development, which could even be considered <em>bad practices</em> nowadays.</p>\n<p>We will try to conform to contemporary best practices starting with <a href=\"/part1\">part 1</a>.</p>\n<p>Open the <a href=\"https://227demo.djosv.com\">example application</a> in your browser.\nSometimes this takes a while.</p>\n<p><strong>The 1st rule of web development</strong>: Always keep the Developer Console open on your web browser.\nOn macOS, open the console by pressing <strong><em>F12</em></strong> or <strong><em>option(⌥)-cmd(⌘)-I</em></strong> simultaneously.\nOn Windows or Linux, open the console by pressing <strong><em>F12</em></strong> or <strong><em>Ctrl-Shift-I</em></strong>.\nThe console can also be opened via the <a href=\"https://en.wikipedia.org/wiki/Menu_key\">context menu</a>.</p>\n<p>Remember to <strong><em>always</em></strong> keep the Developer Console open when developing web applications.</p>\n<p>The console looks like this:</p>\n<picture><img src=\"/static/3312759518250c588a6af333cc9f130e/5a190/1e.png\" alt=\"A screenshot of the developer tools open in a browser\" srcset=\"/static/3312759518250c588a6af333cc9f130e/772e8/1e.png 200w,\n/static/3312759518250c588a6af333cc9f130e/e17e5/1e.png 400w,\n/static/3312759518250c588a6af333cc9f130e/5a190/1e.png 800w,\n/static/3312759518250c588a6af333cc9f130e/c1b63/1e.png 1200w,\n/static/3312759518250c588a6af333cc9f130e/29007/1e.png 1600w,\n/static/3312759518250c588a6af333cc9f130e/bf8c1/1e.png 1722w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Make sure that the <strong><em>Network</em></strong> tab is open, and check the <strong><em>Disable cache</em></strong> option as shown.\n<em>Preserve log</em> can also be useful: it saves the logs printed by the application when the page is reloaded.</p>\n<p><strong>NB:</strong> The most important tab is the <strong><em>Console</em></strong> tab.\nHowever, in this introduction, we will be using the <strong><em>Network</em></strong> tab quite a bit.</p>\n<h3>HTTP GET</h3>\n<p>The server and the web browser communicate with each other using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP\">HTTP</a> protocol.\nThe <em>Network</em> tab shows how the browser and the server communicate.</p>\n<p>When you reload the page (press the <strong><em>F5</em></strong> key or the ↻ symbol on your browser),\nthe console will show that a few events have happened.</p>\n<ul>\n<li>The browser has fetched the contents of the page <em>comp227demo.pages.dev</em> from the server</li>\n<li>And has downloaded the image <em>travel.jpg</em></li>\n<li>It also asked for the little icon that normally shows up next to your website's title in the tabs (favicon.ico).</li>\n</ul>\n<picture><img src=\"/static/9078d680e639cd2fb2e1441941c481cb/5a190/2e.png\" alt=\"Screenshot of the developer console showing these two events\" srcset=\"/static/9078d680e639cd2fb2e1441941c481cb/772e8/2e.png 200w,\n/static/9078d680e639cd2fb2e1441941c481cb/e17e5/2e.png 400w,\n/static/9078d680e639cd2fb2e1441941c481cb/5a190/2e.png 800w,\n/static/9078d680e639cd2fb2e1441941c481cb/c1b63/2e.png 1200w,\n/static/9078d680e639cd2fb2e1441941c481cb/4f1dd/2e.png 1567w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>On a small screen, you might have to widen the console window to see these.</p>\n<p>Clicking the first event reveals more information on what's happening:</p>\n<picture><img src=\"/static/2fc9ab60298b5a59d2bacd6dd3fda83c/5a190/3e.png\" alt=\"Detailed view of a single event\" srcset=\"/static/2fc9ab60298b5a59d2bacd6dd3fda83c/772e8/3e.png 200w,\n/static/2fc9ab60298b5a59d2bacd6dd3fda83c/e17e5/3e.png 400w,\n/static/2fc9ab60298b5a59d2bacd6dd3fda83c/5a190/3e.png 800w,\n/static/2fc9ab60298b5a59d2bacd6dd3fda83c/c1b63/3e.png 1200w,\n/static/2fc9ab60298b5a59d2bacd6dd3fda83c/e0202/3e.png 1395w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The upper part, <strong><em>General</em></strong>, shows that the browser requested the address <em><a href=\"http://227demo.djosv.com\">http://227demo.djosv.com</a></em>\nusing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/GET\">GET</a> method.\nThat the request was successful\nbecause the server response had the <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">Status code</a> 200.</p>\n<p>The request and server response have several <a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_header_fields\">headers</a>:</p>\n<picture><img src=\"/static/bd14f246a3026cdf80a4fc14fd6fb711/5a190/4e.png\" alt=\"Screenshot of response headers\" srcset=\"/static/bd14f246a3026cdf80a4fc14fd6fb711/772e8/4e.png 200w,\n/static/bd14f246a3026cdf80a4fc14fd6fb711/e17e5/4e.png 400w,\n/static/bd14f246a3026cdf80a4fc14fd6fb711/5a190/4e.png 800w,\n/static/bd14f246a3026cdf80a4fc14fd6fb711/c1b63/4e.png 1200w,\n/static/bd14f246a3026cdf80a4fc14fd6fb711/c1bea/4e.png 1388w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The <strong>Response headers</strong> on top tell us details like the true server and the exact time of the response.\nAn important header <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a>\ntells us that the response is a text file in <a href=\"https://en.wikipedia.org/wiki/UTF-8\">UTF-8</a> format and the contents of which have been formatted with HTML.\nThis way the browser knows the response to be a regular <a href=\"https://en.wikipedia.org/wiki/HTML\">HTML</a> page and to render it to the browser 'like a web page'.</p>\n<p>The <strong>Response</strong> tab shows the response data, a regular HTML page.\nThe <strong>body</strong> section determines the structure of the page rendered to the screen:</p>\n<picture><img src=\"/static/ed6ed4618dc31cdf5712d6504d5acbd3/5a190/5e.png\" alt=\"Screenshot of the response tab\" srcset=\"/static/ed6ed4618dc31cdf5712d6504d5acbd3/772e8/5e.png 200w,\n/static/ed6ed4618dc31cdf5712d6504d5acbd3/e17e5/5e.png 400w,\n/static/ed6ed4618dc31cdf5712d6504d5acbd3/5a190/5e.png 800w,\n/static/ed6ed4618dc31cdf5712d6504d5acbd3/c1b63/5e.png 1200w,\n/static/ed6ed4618dc31cdf5712d6504d5acbd3/f0811/5e.png 1367w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The page contains a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div\">div</a> element which in turn contains:</p>\n<ul>\n<li>a heading (<code class=\"language-text\">h1</code>)</li>\n<li>A paragraph with text.</li>\n<li>a link to our <strong><em>actual demo</em></strong></li>\n<li>an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img\">img</a> tag</li>\n</ul>\n<p>Because of the <code class=\"language-text\">img</code> tag, the browser does a second <em>HTTP request</em> to fetch the image <em>travel.jpg</em> from the server.\nThe details of the request are as follows:</p>\n<picture><img src=\"/static/06e6d5ca4257ebaba47d3cf2af6f9aef/5a190/6e.png\" alt=\"Detailed view of the second event\" srcset=\"/static/06e6d5ca4257ebaba47d3cf2af6f9aef/772e8/6e.png 200w,\n/static/06e6d5ca4257ebaba47d3cf2af6f9aef/e17e5/6e.png 400w,\n/static/06e6d5ca4257ebaba47d3cf2af6f9aef/5a190/6e.png 800w,\n/static/06e6d5ca4257ebaba47d3cf2af6f9aef/c1b63/6e.png 1200w,\n/static/06e6d5ca4257ebaba47d3cf2af6f9aef/8b936/6e.png 1368w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The request was made to the address <a href=\"https://227demo.djosv.com/travel.jpg\">https://227demo.djosv.com/travel.jpg</a> and its type is <em>HTTP GET</em>.\nThe response headers tell us that the response size is 1396589 bytes (fairly large!),\nand its <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-type</a> is <em>image/jpeg</em>,\nso it is a png image.\nThe browser uses this information to render the image correctly to the screen.</p>\n<p>The chain of events caused by opening the page <a href=\"https://227demo.djosv.com\">https://227demo.djosv.com</a>\non a browser from the following <a href=\"https://www.geeksforgeeks.org/unified-modeling-language-uml-sequence-diagrams/\">sequence diagram</a>:</p>\n<picture><img src=\"/static/3107548e5ddb169289637e08dc6acc29/108f8/7e.png\" alt=\"Sequence diagram of the flow covered above\" srcset=\"/static/3107548e5ddb169289637e08dc6acc29/772e8/7e.png 200w,\n/static/3107548e5ddb169289637e08dc6acc29/e17e5/7e.png 400w,\n/static/3107548e5ddb169289637e08dc6acc29/108f8/7e.png 777w\" sizes=\"(max-width: 777px) 100vw, 777px\"></picture>\n<p>First, the browser sends an HTTP GET request to the server to fetch the HTML code of the page.\nThe <strong><em>img</em></strong> tag in the HTML prompts the browser to fetch the image <em>travel.jpg</em>.\nThe browser renders the HTML page and the image to the screen.</p>\n<p>Even though it is difficult to notice, the HTML page begins to render before the image has been fetched from the server.</p>\n<h3>Traditional web applications</h3>\n<p>The homepage of the example application works like a <strong>traditional web application</strong>.\nWhen entering the page, the browser fetches the HTML document detailing the structure and the textual content of the page from the server.</p>\n<p>The server has formed this document somehow.\nThe document can be a <em>static</em> text file saved into the server's directory.\nThe server can also form the HTML documents <em>dynamically</em> according to the application code, using, for example, data from a database.\nThe HTML code of the example application has been formed dynamically because it contains information on the number of created places.</p>\n<p>A simplified version of the HTML page is below:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getFrontPageHtml</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">placeCount</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n    &lt;!DOCTYPE html>\n    &lt;html>\n      &lt;head>\n      &lt;/head>\n      &lt;body>\n        &lt;div class='container'>\n          &lt;h1>Go Places with COMP 227&lt;/h1>\n          &lt;p>We have </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>placeCount<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> places for you.&lt;/p>\n          &lt;a href='/places'>Places&lt;/a>\n          &lt;img src='travel.jpg' width='450' />\n        &lt;/div>\n      &lt;/body>\n    &lt;/html>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> \n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> page <span class=\"token operator\">=</span> <span class=\"token function\">getFrontPageHtml</span><span class=\"token punctuation\">(</span>places<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>\n  res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>You don't have to understand the code just yet.</p>\n<p>The content of the HTML page has been saved as a template string or a string that allows for evaluating, for example, variables in the midst of it.\nThe dynamically changing part of the homepage, the number of saved places (in the code <code class=\"language-text\">placeCount</code>),\nis replaced by the current number of places (in the code <code class=\"language-text\">places.length</code>) in the template string.</p>\n<p>Writing HTML amid the code is of course not smart, but for PHP programmers, it was a normal practice.</p>\n<p>In traditional web applications, the browser is \"dumb\".\nIt only fetches HTML data from the server, and all application logic is on the server.\nA server can be created using many different technologies such as:</p>\n<ul>\n<li><a href=\"https://spring.io/learn\">Java Spring</a></li>\n<li><a href=\"https://www.fullstackpython.com/flask.html\">Python Flask</a></li>\n<li><a href=\"http://rubyonrails.org/\">Ruby on Rails</a></li>\n</ul>\n<p>Our example uses the <a href=\"https://expressjs.com/\">Express</a> library with Node.js.\nThis course will use Node.js and Express to create web servers.</p>\n<h3>Running application logic in the browser</h3>\n<p>Keep the Developer Console open.\nEmpty the console by clicking the 🚫 symbol, or by typing <code class=\"language-text\">clear()</code> in the console.\nNow when you go to the <a href=\"https://227demo.djosv.com/places\">places</a> page, the browser does 4 HTTP requests:</p>\n<picture><img src=\"/static/6ef4074fa50055c1a274f1c3c3d9cbd6/5a190/8e.png\" alt=\"Screenshot of the developer console with the 4 requests visible\" srcset=\"/static/6ef4074fa50055c1a274f1c3c3d9cbd6/772e8/8e.png 200w,\n/static/6ef4074fa50055c1a274f1c3c3d9cbd6/e17e5/8e.png 400w,\n/static/6ef4074fa50055c1a274f1c3c3d9cbd6/5a190/8e.png 800w,\n/static/6ef4074fa50055c1a274f1c3c3d9cbd6/c1b63/8e.png 1200w,\n/static/6ef4074fa50055c1a274f1c3c3d9cbd6/b0aa6/8e.png 1233w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>All of the requests have <em>different</em> types.\nThe first request type is of type <strong>document</strong>.\nIt is the HTML code of the page, and it looks as follows:</p>\n<picture><img src=\"/static/828abf0110d711eabe9c82ef9aa6d203/5a190/9e.png\" alt=\"Detailed view of the first request\" srcset=\"/static/828abf0110d711eabe9c82ef9aa6d203/772e8/9e.png 200w,\n/static/828abf0110d711eabe9c82ef9aa6d203/e17e5/9e.png 400w,\n/static/828abf0110d711eabe9c82ef9aa6d203/5a190/9e.png 800w,\n/static/828abf0110d711eabe9c82ef9aa6d203/ae77d/9e.png 1111w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When we compare the page shown on the browser and the HTML code returned by the server, we notice that the code does not contain the list of places.\nThe <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head\"><code class=\"language-text\">head</code></a> section of the HTML contains a\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script\"><code class=\"language-text\">script</code></a> tag.\n<code class=\"language-text\">script</code> causes the browser to fetch a JavaScript file called <em>main.js</em>.</p>\n<p>The JavaScript code looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span>\n    ul<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span>\n\n    data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n\n      ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n      li<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The details of the code are not important right now, but some code has been included to spice up the images and the text.\nWe will properly start coding in <a href=\"/part1\">part 1</a>.\nThe sample code in this part is <em>not relevant at all</em> to the coding techniques of this course.</p>\n<blockquote>\n<p>Some might wonder why <code class=\"language-text\">xhttp</code> object is used instead of the modern <code class=\"language-text\">fetch</code>.\nThis is because we don't want to get into promises at all yet, and the code having a secondary role in this part.\nWe'll discuss savvier ways to make requests to the server in part 2.</p>\n</blockquote>\n<p>Immediately after fetching the <code class=\"language-text\">script</code> tag, the browser begins to execute the code.</p>\n<p>The last two lines instruct the browser to do an HTTP GET request to the server's address <em>/data.json</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">xhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>This is the bottom-most request shown on the Network tab.</p>\n<p>We can try going to the address <a href=\"https://227demo.djosv.com/data.json\">https://227demo.djosv.com/data.json</a> straight from the browser:</p>\n<picture><img src=\"/static/7bea829704a3f56d9031f2b0d8d20c26/5a190/10e.png\" alt=\"Raw JSON Data\" srcset=\"/static/7bea829704a3f56d9031f2b0d8d20c26/772e8/10e.png 200w,\n/static/7bea829704a3f56d9031f2b0d8d20c26/e17e5/10e.png 400w,\n/static/7bea829704a3f56d9031f2b0d8d20c26/5a190/10e.png 800w,\n/static/7bea829704a3f56d9031f2b0d8d20c26/c1b63/10e.png 1200w,\n/static/7bea829704a3f56d9031f2b0d8d20c26/cd78c/10e.png 1236w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>There we find the places in <a href=\"https://en.wikipedia.org/wiki/JSON\">JSON</a> \"raw data\".\nBy default, Chromium-based browsers are not too good at displaying JSON data.\nPlugins can be used to handle the formatting.\nInstall, for example, <a href=\"https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc\">JSONVue</a> on Chrome, and reload the page.\nThe data is now nicely formatted:</p>\n<picture><img src=\"/static/a67d5a72a6cafe0bcb46b9a78207ec7e/108f8/11e.png\" alt=\"Formatted JSON output\" srcset=\"/static/a67d5a72a6cafe0bcb46b9a78207ec7e/772e8/11e.png 200w,\n/static/a67d5a72a6cafe0bcb46b9a78207ec7e/e17e5/11e.png 400w,\n/static/a67d5a72a6cafe0bcb46b9a78207ec7e/108f8/11e.png 777w\" sizes=\"(max-width: 777px) 100vw, 777px\"></picture>\n<p>So, the JavaScript code of the places page above downloads the JSON data containing the places, and forms a bullet-point list from the names of places:</p>\n<p>This is done by the following code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span>\nul<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n\n  ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n  li<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The code first creates an unordered list with a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul\">ul</a> tag...</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span>\nul<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'class'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>...and then adds one <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li\">li</a> tag for each place.\nOnly the <code class=\"language-text\">name</code> field of each place becomes the contents of the <code class=\"language-text\">li</code> tag.\nThe timestamps found in the raw data are not used for anything here.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">data<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n\n  ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n  li<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now open the <strong><em>Console</em></strong> tab on your Developer Console:</p>\n<picture><img src=\"/static/5423a3a1257b23acf4d0975769780316/5a190/12e.png\" alt=\"Screenshot of the console tab on the developer console\" srcset=\"/static/5423a3a1257b23acf4d0975769780316/772e8/12e.png 200w,\n/static/5423a3a1257b23acf4d0975769780316/e17e5/12e.png 400w,\n/static/5423a3a1257b23acf4d0975769780316/5a190/12e.png 800w,\n/static/5423a3a1257b23acf4d0975769780316/1b1d5/12e.png 876w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>By clicking the little triangle at the beginning of the line, you can expand the text on the console.</p>\n<picture><img src=\"/static/3756150fd36f41df6d07c43011ffa7b6/5a190/13e.png\" alt=\"Screenshot of one of the previously collapsed entries; now expanded\" srcset=\"/static/3756150fd36f41df6d07c43011ffa7b6/772e8/13e.png 200w,\n/static/3756150fd36f41df6d07c43011ffa7b6/e17e5/13e.png 400w,\n/static/3756150fd36f41df6d07c43011ffa7b6/5a190/13e.png 800w,\n/static/3756150fd36f41df6d07c43011ffa7b6/1b1d5/13e.png 876w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>This output on the console is caused by the <code class=\"language-text\">console.log</code> command in the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So, after receiving data from the server, the code prints it to the console.</p>\n<p>The <strong><em>Console</em></strong> tab and the <code class=\"language-text\">console.log</code> command will become very familiar to you during the course.</p>\n<h3>Event handlers and Callback functions</h3>\n<p>The structure of this code is a bit odd:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> xhttp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// code that takes care of the server response</span>\n<span class=\"token punctuation\">}</span>\n\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\nxhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The request to the server is sent on the last line, but the code to handle the response can be found further up.\nWhat's going on?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">xhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>On this line, an <strong>event handler</strong> for the event <code class=\"language-text\">onreadystatechange</code> is defined for the <code class=\"language-text\">xhttp</code> object doing the request.\nWhen the state of the object changes, the browser calls the event handler function.\nThe function code checks:</p>\n<ul>\n<li>\n<p>that the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState\">readyState</a> equals 4</p>\n<ul>\n<li>which depicts the situation <em>The operation is complete</em></li>\n</ul>\n</li>\n<li>that the HTTP status code of the response is 200.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">xhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// code that takes care of the server response</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The mechanism of invoking event handlers is very common in JavaScript.\nEvent handler functions are called <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Callback_function\">callback</a> functions.\nThe application code does not invoke the functions itself, but the runtime environment.\nThe <em>browser invokes</em> the function at an appropriate time when the <strong>event</strong> has occurred.</p>\n<h3>Document Object Model or DOM</h3>\n<p>We can think of HTML pages as implicit tree structures.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">html\n  head\n    link\n    script\n  body\n    div\n      h1\n      div\n        ul\n          li\n          li\n          li\n      form\n        input\n        input</code></pre></div>\n<p>The same treelike structure can be seen on the console tab <strong><em>Elements</em></strong>.</p>\n<picture><img src=\"/static/a25db3aace3000243fa8cc4e338602e0/68e9c/14e.png\" alt=\"A screenshot of the Elements tab of the developer console\" srcset=\"/static/a25db3aace3000243fa8cc4e338602e0/772e8/14e.png 200w,\n/static/a25db3aace3000243fa8cc4e338602e0/e17e5/14e.png 400w,\n/static/a25db3aace3000243fa8cc4e338602e0/68e9c/14e.png 654w\" sizes=\"(max-width: 654px) 100vw, 654px\"></picture>\n<p>The functioning of the browser is based on the idea of depicting HTML elements as a tree.</p>\n<p>Document Object Model, or <a href=\"https://en.wikipedia.org/wiki/Document_Object_Model\">DOM</a>,\nis an Application Programming Interface (<strong>API</strong>).\nThe DOM enables programmatic modification of the <strong>element trees</strong> corresponding to web pages.</p>\n<p>The JavaScript code introduced in the previous chapter used the DOM-API to add a list of places to the page.</p>\n<p>The following code creates a new node to the variable <code class=\"language-text\">ul</code>, and adds some child nodes to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> li <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n\n  ul<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>li<span class=\"token punctuation\">)</span>\n  li<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Finally, the tree branch of the <code class=\"language-text\">ul</code> variable is connected to its proper place in the HTML tree of the whole page:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'places'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>ul<span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Manipulating the document object from console</h3>\n<p>The topmost node of the DOM tree of an HTML document is called the <code class=\"language-text\">document</code> object.\nWe can perform various operations on a webpage using the DOM-API.\nYou can access the <code class=\"language-text\">document</code> object by typing <code class=\"language-text\">document</code> into the Console tab:</p>\n<picture><img src=\"/static/abed7e3e430220860df68ab5a8a04306/5a190/15e.png\" alt=\"document in console tab of developer tools\" srcset=\"/static/abed7e3e430220860df68ab5a8a04306/772e8/15e.png 200w,\n/static/abed7e3e430220860df68ab5a8a04306/e17e5/15e.png 400w,\n/static/abed7e3e430220860df68ab5a8a04306/5a190/15e.png 800w,\n/static/abed7e3e430220860df68ab5a8a04306/e35ec/15e.png 861w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Let's add a new place to the page <strong><em>directly from the console</em></strong>.</p>\n<p>First, we'll get the list of places from the page.\nThe list is in the first <code class=\"language-text\">ul</code> element of the page:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>Then create a new <code class=\"language-text\">li</code> element and add some text content to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">newElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\nnewElement<span class=\"token punctuation\">.</span>textContent <span class=\"token operator\">=</span> <span class=\"token string\">'Page manipulation straight from the console is easy'</span></code></pre></div>\n<p>And add the new <code class=\"language-text\">li</code> element to the list:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">list<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>newElement<span class=\"token punctuation\">)</span></code></pre></div>\n<picture><img src=\"/static/d848eaddf5583c54b601b893a829e970/5a190/16e.png\" alt=\"Screenshot of the page with the new place added to the list\" srcset=\"/static/d848eaddf5583c54b601b893a829e970/772e8/16e.png 200w,\n/static/d848eaddf5583c54b601b893a829e970/e17e5/16e.png 400w,\n/static/d848eaddf5583c54b601b893a829e970/5a190/16e.png 800w,\n/static/d848eaddf5583c54b601b893a829e970/30c92/16e.png 874w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<blockquote>\n<p><em>Side note (optional)</em> - If you are studying the pictures closely you may see that there is this additional <code class=\"language-text\">::marker</code> that got placed into the li tag.\nThis is a pseudo-marker generated by chrome to represent the bullet next to the list item and is present because we are styling the bullet list.\nIt has no bearing and does not appear in the html tag, but it's present to help us understand how items are being styled in the developer tools.</p>\n</blockquote>\n<p>Even though the page updates on your browser, the changes are not permanent.\nIf the page is reloaded, the new place will disappear, because the changes were not pushed to the server.\nThe JavaScript code the browser fetches will always create the list of places based on JSON data from the address <a href=\"https://227demo.djosv.com/data.json\">https://227demo.djosv.com/data.json</a>.</p>\n<h3>CSS</h3>\n<p>The <code class=\"language-text\">head</code> element of the HTML code of the Places page contains a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link\">link</a> tag.\nThis <code class=\"language-text\">link</code> tag determines that the browser must fetch a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\">CSS</a>\nstyle sheet from the address <a href=\"https://227demo.djosv.com/main.css\">main.css</a>.</p>\n<p>Cascading Style Sheets, or CSS, is a style sheet language used to determine the appearance of web pages.</p>\n<p>The fetched CSS file looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">:root</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color-scheme</span><span class=\"token punctuation\">:</span> dark<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.container</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 10px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.places</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> lightgreen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The file defines:</p>\n<ul>\n<li>two <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Class_selectors\">class selectors</a> (<em><code class=\"language-text\">.container</code></em> and <em><code class=\"language-text\">.places</code></em>)</li>\n<li>one <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors\">type selector</a>(<em><code class=\"language-text\">body</code></em>)</li>\n<li>one <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes\">pseudo-class selector</a> (<em><code class=\"language-text\">:root</code></em>)</li>\n</ul>\n<p>The <strong>class selectors</strong> are used to select certain parts of the page and to define styling rules to style them.\nThe type and pseudo-class selectors are merely present to switch the component to look closer to a dark mode equivalent (and to make it .1% more stylish).\nThose two are not as important to our current discussion.</p>\n<p>A class selector definition always starts with a period and contains the name of the class.</p>\n<p>The classes can be applied to HTML elements as <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/class\"><strong>attributes</strong></a>.</p>\n<p>CSS attributes can be examined on the <strong><em>Elements</em></strong> tab of the console:  </p>\n<picture><img src=\"/static/58783a34c2ec274fddeed12a21e371e8/5a190/17e.png\" alt=\"Screenshot of the Elements tab on the developer console\" srcset=\"/static/58783a34c2ec274fddeed12a21e371e8/772e8/17e.png 200w,\n/static/58783a34c2ec274fddeed12a21e371e8/e17e5/17e.png 400w,\n/static/58783a34c2ec274fddeed12a21e371e8/5a190/17e.png 800w,\n/static/58783a34c2ec274fddeed12a21e371e8/75a80/17e.png 1134w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The outermost <code class=\"language-text\">div</code> element has the class <code class=\"language-text\">container</code>.\nThe <code class=\"language-text\">ul</code> element containing the list of places has the class <code class=\"language-text\">places</code>.</p>\n<p>The CSS rule defines that elements with the <code class=\"language-text\">container</code> class will be outlined with a one-pixel wide <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/border\">border</a>.\nIt also sets 10-pixel <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/padding\">padding</a> on the element.\nThis adds some space between the element's content and the border.</p>\n<p>The <code class=\"language-text\">.places</code> CSS rule sets the text color as <code class=\"language-text\">lightgreen</code>.</p>\n<p>HTML elements can also have other attributes apart from classes.\nThe <code class=\"language-text\">div</code> element containing the places has an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id\">id</a> attribute.\nJavaScript code uses the id to find the element.</p>\n<p>The <strong><em>Elements</em></strong> tab of the console can be used to change the styles of the elements.</p>\n<picture><img src=\"/static/eeedf754227f1586bd2b61ee36e416d4/5a190/18e.png\" alt=\"developer tools elements tab\" srcset=\"/static/eeedf754227f1586bd2b61ee36e416d4/772e8/18e.png 200w,\n/static/eeedf754227f1586bd2b61ee36e416d4/e17e5/18e.png 400w,\n/static/eeedf754227f1586bd2b61ee36e416d4/5a190/18e.png 800w,\n/static/eeedf754227f1586bd2b61ee36e416d4/99f37/18e.png 1100w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Changes made on the console will not be permanent.\nIf you want to make lasting changes, they must be saved to the CSS style sheet on the server.</p>\n<h3>Loading a page containing JavaScript - review</h3>\n<p>Let's review what happens when the page <a href=\"https://227demo.djosv.com/places\">https://227demo.djosv.com/places</a> is opened on the browser.</p>\n<picture><img src=\"/static/832c3b8f51f272ddc6bafa8de473044a/5a190/19e.png\" alt=\"sequence diagram of browser/server interaction\" srcset=\"/static/832c3b8f51f272ddc6bafa8de473044a/772e8/19e.png 200w,\n/static/832c3b8f51f272ddc6bafa8de473044a/e17e5/19e.png 400w,\n/static/832c3b8f51f272ddc6bafa8de473044a/5a190/19e.png 800w,\n/static/832c3b8f51f272ddc6bafa8de473044a/a2b88/19e.png 908w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<ul>\n<li>The browser fetches the HTML code defining the content and the structure of the page from the server using an HTTP GET request.</li>\n<li>Links in the HTML code cause the browser to also fetch the CSS style sheet <em>main.css</em>...</li>\n<li>...and a JavaScript code file <em>main.js</em></li>\n<li>The browser executes the JavaScript code.\nThe code makes an HTTP GET request to the address <a href=\"https://227demo.djosv.com/data.json\">https://227demo.djosv.com/data.json</a>, which\nreturns the places as JSON  data.</li>\n<li>When the data has been fetched, the browser executes an <em>event handler</em>, which renders the places to the page using the DOM-API.</li>\n</ul>\n<h3>Forms and HTTP POST</h3>\n<p>Next, let's examine how adding a new place is done.</p>\n<p>The Places page contains a <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Your_first_HTML_form\">form element</a>.</p>\n<picture><img src=\"/static/f851bc8839b89835757f02f1a6fda74f/5a190/20e.png\" alt=\"form element highlight in webpage and developer tools\" srcset=\"/static/f851bc8839b89835757f02f1a6fda74f/772e8/20e.png 200w,\n/static/f851bc8839b89835757f02f1a6fda74f/e17e5/20e.png 400w,\n/static/f851bc8839b89835757f02f1a6fda74f/5a190/20e.png 800w,\n/static/f851bc8839b89835757f02f1a6fda74f/6937a/20e.png 1094w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>When the button on the form is clicked, the browser will send the user input to the server.\nLet's open the <strong><em>Network</em></strong> tab and see what submitting the form looks like:</p>\n<picture><img src=\"/static/9406eef53443bc870217d0ba3a30b348/5a190/21e.png\" alt=\"Screenshot of the Network tab where the events for submitting the form are shown\" srcset=\"/static/9406eef53443bc870217d0ba3a30b348/772e8/21e.png 200w,\n/static/9406eef53443bc870217d0ba3a30b348/e17e5/21e.png 400w,\n/static/9406eef53443bc870217d0ba3a30b348/5a190/21e.png 800w,\n/static/9406eef53443bc870217d0ba3a30b348/afd0b/21e.png 1153w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Surprisingly, submitting the form causes no less than <strong>five</strong> HTTP requests.\nThe first one is the <strong><em>form submit event</em></strong>.\nLet's zoom into it:</p>\n<picture><img src=\"/static/ea7620a036815a1cc91d676e93cfe200/5a190/22e.png\" alt=\"Detailed view of the first request\" srcset=\"/static/ea7620a036815a1cc91d676e93cfe200/772e8/22e.png 200w,\n/static/ea7620a036815a1cc91d676e93cfe200/e17e5/22e.png 400w,\n/static/ea7620a036815a1cc91d676e93cfe200/5a190/22e.png 800w,\n/static/ea7620a036815a1cc91d676e93cfe200/c1b63/22e.png 1200w,\n/static/ea7620a036815a1cc91d676e93cfe200/19a15/22e.png 1229w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>It is an <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\">HTTP POST</a> request to the server address <strong><em>new_place</em></strong>.\nThe server responds with HTTP status code 302.\nThis is a <a href=\"https://en.wikipedia.org/wiki/URL_redirection\">URL redirect</a>,\nwith which the server asks the browser to do a new HTTP GET request to the address defined in the header's <em>Location</em> - the address <code class=\"language-text\">places</code>.</p>\n<p>So, the browser reloads the <em>places</em> page.\nThe reload causes three more HTTP requests: fetching the style sheet (<em>main.css</em>),\nthe JavaScript code (<em>main.js</em>), and the raw data of the places (<em>data.json</em>).</p>\n<p>We can also see the data submitted in the Network tab.\nThe Form Data dropdown is within the new Payload tab, located to the right of the Headers tab.</p>\n<picture><img src=\"/static/c29efeef53e6d1ba47a2b2726b853a62/5a190/23e.png\" alt=\"form data dropdown in developer tools\" srcset=\"/static/c29efeef53e6d1ba47a2b2726b853a62/772e8/23e.png 200w,\n/static/c29efeef53e6d1ba47a2b2726b853a62/e17e5/23e.png 400w,\n/static/c29efeef53e6d1ba47a2b2726b853a62/5a190/23e.png 800w,\n/static/c29efeef53e6d1ba47a2b2726b853a62/1cfc2/23e.png 900w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The Form tag has attributes <code class=\"language-text\">action</code> and <code class=\"language-text\">method</code>, which define that submitting the form is done as an HTTP POST request to the address <strong><em>new_place</em></strong>.</p>\n<picture><img src=\"/static/9dd4c72b6e583138625545bcac59b63b/d54e4/24e.png\" alt=\"action and method highlight\" srcset=\"/static/9dd4c72b6e583138625545bcac59b63b/772e8/24e.png 200w,\n/static/9dd4c72b6e583138625545bcac59b63b/e17e5/24e.png 400w,\n/static/9dd4c72b6e583138625545bcac59b63b/d54e4/24e.png 747w\" sizes=\"(max-width: 747px) 100vw, 747px\"></picture>\n<p>The code on the server responsible for the POST request is quite simple (NB: this code is on the server, and not on the JavaScript code fetched by the browser):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/new_place'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  places<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>place<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">redirect</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/places'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Data is sent as the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\">body</a> of the POST request.</p>\n<p>The server can access the data by accessing the <code class=\"language-text\">req.body</code> field of the request object <code class=\"language-text\">req</code>.</p>\n<p>The server creates a new <code class=\"language-text\">place</code> object and adds it to an array called <code class=\"language-text\">places</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">places<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>place<span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">place</code> objects have two fields:</p>\n<ol>\n<li>a <code class=\"language-text\">name</code> containing the actual name of the place, and</li>\n<li>a <code class=\"language-text\">date</code> containing the date and time the place was created.</li>\n</ol>\n<p><em>The server does not save new places to a database, so new places disappear when the server is restarted.</em></p>\n<h3>AJAX</h3>\n<p>The places page of the application follows an early-nineties style of web development and uses \"Ajax\".\nAs such, it's on the crest of the wave of early 2000s web technology.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Ajax_(programming)\"><strong>AJAX</strong></a> (Asynchronous JavaScript and XML)\nis a term introduced in February 2005 on the back of advancements in browser technology to describe a new revolutionary approach.\nAJAX enables the fetching of content to web pages using JavaScript included within the HTML, without the need to rerender the page.</p>\n<p>Before the AJAX era, all web pages worked like the\n<a href=\"/part0/fundamentals_of_web_apps#traditional-web-applications\">traditional web application</a>\nwe saw earlier in this chapter.\nAll of the data shown on the page was fetched with the HTML code generated by the server.</p>\n<p>The <em>places</em> page uses AJAX to fetch the <code class=\"language-text\">places</code> data.\nSubmitting the form still uses the traditional mechanism of submitting web forms.</p>\n<p>The application URLs reflect the <a href=\"https://www.youtube.com/watch?v=GA8z7f7a2Pk\">old, carefree times</a>.\nJSON data is fetched from the URL <a href=\"https://227demo.djosv.com/data.json\">https://227demo.djosv.com/data.json</a>\nand new places are sent to the URL <a href=\"https://227demo.djosv.com/new_place\">https://227demo.djosv.com/new_place</a>.\nNowadays URLs like these would not be considered acceptable,\nas they don't follow the generally acknowledged conventions of <a href=\"https://en.wikipedia.org/wiki/Representational_state_transfer#Applied_to_web_services\">RESTful</a> APIs,\nwhich we'll look into more in <a href=\"/part3\">part 3</a>.</p>\n<p>The term AJAX is now so commonplace that it's taken for granted.\nThe term, like <em>shindig</em> and <em>home skillet</em>, has faded out of our collective consciousness.</p>\n<h3>Single page app</h3>\n<p>In our example app, the home page works like a traditional webpage: All of the logic is on the server, and the browser only renders the HTML as instructed.</p>\n<p>The <em>places</em> page gives some of the responsibility, generating the HTML code for existing places, to the browser.\nThe browser tackles this job by executing the JavaScript code it fetched from the server.\nThe code fetches the places from the server as JSON data and adds HTML elements for displaying the <code class=\"language-text\">places</code> on the page using the <a href=\"/part0/fundamentals_of_web_apps#document-object-model-or-dom\">DOM-API</a>.</p>\n<p>In recent years, the <a href=\"https://en.wikipedia.org/wiki/Single-page_application\">Single-page application</a> (SPA) style of creating web applications has emerged.\nSPA-style websites don't fetch all of their pages separately from the server like our sample application does,\nbut instead comprise only one HTML page fetched from the server,\nthe contents of which are manipulated with JavaScript that executes in the browser.</p>\n<p>The Places page of our application bears some resemblance to SPA-style apps, but it's not quite there yet.\nEven though the logic for rendering the places is run on the browser, the page still uses the traditional way of adding new places.\nThe data is sent to the server via the form's <em>submit</em>, and the server instructs the browser to reload the Places page with a <em>redirect</em>.</p>\n<p>A single-page app version of our example application can be found at <a href=\"https://227demo.djosv.com/spa\">https://227demo.djosv.com/spa</a>.\nAt first glance, the application looks the same as the previous one.\nThe HTML code is almost identical, but the JavaScript file is different (<em>spa.js</em>) and there is a small change in how the form tag is defined:</p>\n<picture><img src=\"/static/f1bf9e1842d7a0fb8b3ab372a15cb592/5a190/25e.png\" alt=\"form with missing action and method\" srcset=\"/static/f1bf9e1842d7a0fb8b3ab372a15cb592/772e8/25e.png 200w,\n/static/f1bf9e1842d7a0fb8b3ab372a15cb592/e17e5/25e.png 400w,\n/static/f1bf9e1842d7a0fb8b3ab372a15cb592/5a190/25e.png 800w,\n/static/f1bf9e1842d7a0fb8b3ab372a15cb592/71ee9/25e.png 1081w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The form has no <code class=\"language-text\">action</code> or <code class=\"language-text\">method</code> attributes to define how and where to send the input data.</p>\n<p>Open the <strong><em>Network</em></strong> tab and empty it.\nWhen you now create a new place, you'll notice that the browser sends only one request to the server.</p>\n<picture><img src=\"/static/19671b3e450e66e709c646503914d672/5a190/26e.png\" alt=\"Network tab in developer tools for spa shows just one request\" srcset=\"/static/19671b3e450e66e709c646503914d672/772e8/26e.png 200w,\n/static/19671b3e450e66e709c646503914d672/e17e5/26e.png 400w,\n/static/19671b3e450e66e709c646503914d672/5a190/26e.png 800w,\n/static/19671b3e450e66e709c646503914d672/54bf4/26e.png 1007w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The POST request to the address <code class=\"language-text\">new_place_spa</code> contains the new place as JSON data containing both the name of the place (<code class=\"language-text\">name</code>) and the timestamp (<code class=\"language-text\">date</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Papa Urb's Grill\"</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">\"2023-01-15T15:15:59.905Z\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <strong>Content-Type</strong> header of the request tells the server that the included data is represented in JSON format.</p>\n<picture><img src=\"/static/84f2230ed704f60db4c8fa06751b18c7/5a190/27e.png\" alt=\"Content-type header in developer tools\" srcset=\"/static/84f2230ed704f60db4c8fa06751b18c7/772e8/27e.png 200w,\n/static/84f2230ed704f60db4c8fa06751b18c7/e17e5/27e.png 400w,\n/static/84f2230ed704f60db4c8fa06751b18c7/5a190/27e.png 800w,\n/static/84f2230ed704f60db4c8fa06751b18c7/c1b63/27e.png 1200w,\n/static/84f2230ed704f60db4c8fa06751b18c7/b79a5/27e.png 1372w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Without this header, the server would not know how to correctly parse the data.</p>\n<p>The server responds with status code <a href=\"https://httpstatuses.com/201\">201 created</a>.\nThis time the server does not ask for a redirect, the browser stays on the same page, and it sends no further HTTP requests.</p>\n<p>The SPA version of the app does not traditionally send the form data.\nInstead, it uses the JavaScript code it fetched from the server.\nWe'll look into this code a bit, even though understanding all the details of it is not important just yet.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> form <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'places_form'</span><span class=\"token punctuation\">)</span>\nform<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onsubmit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">var</span> place <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n    date<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  places<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">)</span>\n  e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>elements<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n  <span class=\"token function\">redrawPlaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">sendToServer</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The command <code class=\"language-text\">document.getElementById(&#39;places_form&#39;)</code> instructs the code to fetch the form element from the page and to register an <strong><em>event handler</em></strong> to handle the form's submit event.\nThe event handler immediately calls the method <code class=\"language-text\">e.preventDefault()</code> to prevent the default handling of the form's submit.\nThe default method would send the data to the server and cause a new GET request, which we don't want to happen.</p>\n<p>Then the event handler:</p>\n<ol>\n<li>creates a new place</li>\n<li>adds it to <code class=\"language-text\">places</code> with the command <code class=\"language-text\">places.push(place)</code></li>\n<li>rerenders the webpage's list and</li>\n<li>sends the new place to the server.</li>\n</ol>\n<p>The code for sending the place to the server is as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sendToServer</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">place</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> xhttpForPost <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// ...</span>\n\n  xhttpForPost<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/new_place_spa'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  xhttpForPost<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/json'</span>\n  <span class=\"token punctuation\">)</span>\n  xhttpForPost<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>place<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code determines that the data is to be sent with an HTTP POST request and the data type is to be JSON.\nThe data type is determined with a <em>Content-type</em> header.\nThen the data is sent as a JSON string.</p>\n<p>The application code is available at <a href=\"https://github.com/comp227/example_app\">https://github.com/comp227/example_app</a>.\nIt's worth remembering that the application is only meant to demonstrate the concepts of the course.\nThe code follows a poor style of development in some measures, and should not be used as an example when creating your applications.\nThe same is true for the URLs used.\nThe URL <code class=\"language-text\">new_place_spa</code> that new places are sent to, does not adhere to current best practices.</p>\n<h3>JavaScript Libraries</h3>\n<p>The sample app is done with so-called <a href=\"https://www.freecodecamp.org/news/is-vanilla-javascript-worth-learning-absolutely-c2c67140ac34/\"><strong>vanilla JavaScript</strong></a>,\nusing only the DOM-API and JavaScript to manipulate the structure of the pages.</p>\n<p>Instead of using JavaScript and the DOM-API only, many popular libraries provide tools that make it easier to manipulate pages compared to the DOM-API.\nOne of these libraries is the <em>ever-so-popular</em> <a href=\"https://jquery.com/\"><strong>jQuery</strong></a>.</p>\n<p>A long time ago, web applications traditionally generated HTML pages on the server side when they wanted to add functionality.\nInstead, jQuery built itself on top of Javascript to enhance the functionality on the browser side.\nOne of the reasons for the success of jQuery was its so-called cross-browser compatibility.\nThe library worked regardless of the browser or the company that made it, so there was no need for browser-specific solutions.\nNowadays using jQuery is not as justified given the advancement of JavaScript,\nand the most popular browsers generally support basic functionalities well.</p>\n<p>The rise of the single-page app brought several more \"modern\" ways of web development than jQuery.\nThe favorite of the first wave of developers was <a href=\"http://backbonejs.org/\">BackboneJS</a>.\nAfter its <a href=\"https://github.com/angular/angular.js/blob/master/CHANGELOG.md#100-temporal-domination-2012-06-13\">launch</a> in 2012,\nGoogle's <a href=\"https://angularjs.org/\">AngularJS</a> quickly became almost the de facto standard of modern web development.</p>\n<p>However, the popularity of Angular plummeted in October 2014 after the\n<a href=\"https://web.archive.org/web/20151208002550/https://jaxenter.com/angular-2-0-announcement-backfires-112127.html\">Angular team announced that support for version 1 will end</a>,\nand Angular 2 will not be backwards compatible with the first version.\nAngular 2 and the newer versions have not gotten too warm of a welcome.</p>\n<p>Currently, one of the most popular tools for implementing the browser-side logic of web applications is Facebook's <a href=\"https://reactjs.org/\">React</a> library.\nDuring this course, we will get familiar with React and other technologies which are frequently used together.</p>\n<p>The status of React seems strong, but the world of JavaScript is ever-changing.\nFor example, while <a href=\"https://vuejs.org/\">VueJS</a> has been around a while as an \"up-and-comer\",\nthere are other frameworks like <a href=\"https://svelte.dev/\">Svelte</a> and <a href=\"https://qwik.build.io\">Qwik</a> that have recently started generating buzz.\nWhile we have been talking about SPA, there is also talk about <a href=\"https://dev.to/this-is-learning/the-return-of-server-side-routing-b05\">returning more components back to the server</a>.</p>\n<h3>Full-stack web development</h3>\n<p>What does the term - <em>Full-stack web development</em> - mean?\n<strong>Full stack</strong> is a buzzword.\nIt's ubiquitous yet devoid of any meaning.\nLet's try to provide some context for how the word ends up relating to the term stack.</p>\n<p>Practically all web applications have (at least) two \"layers\":</p>\n<ol>\n<li>the browser, which is closer to the end-user (AKA the top layer, and</li>\n<li>the server, whose layer is typically below the browser's</li>\n</ol>\n<p>There is often also a database layer below the server.\nWe can therefore think of the <strong>architecture</strong> of a web application as a kind of <strong>stack</strong> of layers.</p>\n<p>Often, we also talk about the <a href=\"https://en.wikipedia.org/wiki/Front_and_back_ends\">frontend and the backend</a>.\nThe browser is the frontend, and JavaScript that runs on the browser is frontend code.\nThe server on the other hand is the backend.</p>\n<p>In the context of this course, full-stack web development means that we focus on all parts of the application: the frontend, the backend, and the database.\nSometimes the software on the server and its operating system are seen as parts of the stack, but we won't go into those.</p>\n<p>We will code the backend with JavaScript, using the <a href=\"https://nodejs.org/en/\">Node.js</a> runtime environment.\nUsing the same programming language on multiple layers of the stack gives full-stack web development a whole new dimension.\nHowever, it's not a requirement of full-stack web development to use the same programming language (JavaScript) for all layers of the stack.</p>\n<p>It used to be more common for developers to specialize in one layer of the stack, for example, the backend.\nTechnologies on the backend and the frontend were quite different.\nWith the Full stack trend, it has become common for developers to be proficient in all layers of the application and the database.\nOftentimes, full-stack developers must also have enough configuration and administration skills to operate their applications, for example, in the cloud.</p>\n<h3>JavaScript fatigue</h3>\n<p>Full-stack web development is challenging in many ways.\nThings are happening in many places at once, and debugging is quite a bit harder than with regular desktop applications.\nJavaScript does not always work as you'd expect it to (compared to many other languages),\nand the asynchronous way its runtime environments work causes all sorts of challenges.\nCommunicating on the web requires knowledge of the HTTP protocol.\nOne must also handle databases and server administration and configuration.\nIt would also be good to know enough CSS to make applications at least somewhat presentable.</p>\n<p>The world of JavaScript develops fast, which brings its own set of challenges.\nTools, libraries and the language itself are under constant development.\nSome are starting to get tired of the constant change, and have coined a term for it: <strong>JavaScript fatigue</strong>.\nSee <a href=\"https://auth0.com/blog/how-to-manage-javascript-fatigue/\">How to Manage JavaScript Fatigue on auth0</a> or\n<a href=\"https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4\">JavaScript fatigue on Medium</a>.</p>\n<p>You will suffer from JavaScript fatigue yourself during this course.\nFortunately for us, there are a few ways to smooth the learning curve, and we will concentrate on the coding instead of the configuration.\nWe can't avoid configuration completely\n(and we'll be doing some of that in part c),\nbut after that, we can merrily push ahead in the next few weeks while hopefully avoiding the worst of it.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 0.1-0.6</h3>\n<p>The exercises are submitted through GitHub and marking them as done on Canvas.</p>\n<p>You will submit all of the exercises into the repository that you will be provided in part C GitHub.\nWhile we wait to do those parts, though, <strong>please start doing these exercises first</strong>.</p>\n<p>For now, <em>create a folder called part0 and put all of your work in there until you have the tools that we'll go over in the next section</em>.</p>\n<h4>0.1: HTML</h4>\n<p>Review the basics of HTML by reading this tutorial from Mozilla: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/HTML_basics\"><strong>HTML tutorial</strong></a>.</p>\n<p>This exercise <em>is not submitted to GitHub</em>, it's enough to just read the tutorial</p>\n<h4>0.2: CSS</h4>\n<p>Review the basics of CSS by reading this tutorial from Mozilla: <a href=\"https://developer.mozilla.org/en-US/docs/Learn/Getting_started_with_the_web/CSS_basics\">CSS tutorial</a>.</p>\n<p>This exercise <em>is not submitted to GitHub</em>, it's enough to just read the tutorial</p>\n<h4>0.3: HTML forms</h4>\n<p>Learn about the basics of HTML forms by reading Mozilla's tutorial <a href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Your_first_HTML_form\">Your first form</a>.</p>\n<p>This exercise <em>is not submitted to GitHub</em>, it's enough to just read the tutorial</p>\n<h4>0.4: New place diagram</h4>\n<p>In the section <a href=\"/part0/fundamentals_of_web_apps#loading-a-page-containing-java-script-review\">Loading a page containing JavaScript - review</a>,\nthe chain of events caused by opening the page <a href=\"https://227demo.djosv.com/places\">https://227demo.djosv.com/places</a>\nis depicted as a <a href=\"https://developer.ibm.com/articles/the-sequence-diagram/\">sequence diagram</a></p>\n<p>The diagram was made using the <a href=\"https://plantuml.com/sequence-diagram\">web sequence diagrams</a> service as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">@startuml\nskinparam sequenceMessageAlign center\nBrowser -<span class=\"token operator\">></span> Server <span class=\"token builtin class-name\">:</span> HTTP GET https://227demo.djosv.com/places\nBrowser <span class=\"token operator\">&lt;</span>-- Server <span class=\"token builtin class-name\">:</span> HTML-code\nBrowser -<span class=\"token operator\">></span> Server <span class=\"token builtin class-name\">:</span> HTTP GET https://227demo.djosv.com/main.css\nBrowser <span class=\"token operator\">&lt;</span>-- Server <span class=\"token builtin class-name\">:</span> main.css\nBrowser -<span class=\"token operator\">></span> Server <span class=\"token builtin class-name\">:</span> HTTP GET https://227demo.djosv.com/main.js\nBrowser <span class=\"token operator\">&lt;</span>-- Server <span class=\"token builtin class-name\">:</span> main.js\n\nnote over Browser\n browser starts executing js-code\n that requests JSON data from server\nend note\n\nBrowser -<span class=\"token operator\">></span> Server <span class=\"token builtin class-name\">:</span> HTTP GET https://227demo.djosv.com/data.json\nBrowser <span class=\"token operator\">&lt;</span>-- Server <span class=\"token builtin class-name\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> name: <span class=\"token string\">\"El Pazcifico\"</span>, date: <span class=\"token string\">\"2023-01-13\"</span><span class=\"token punctuation\">}</span>, <span class=\"token punctuation\">..</span>.<span class=\"token punctuation\">]</span>\n\nnote over Browser\n browser executes the event handler\n that renders the places to display\nend note\n@enduml</code></pre></div>\n<p><strong>Create a similar diagram</strong> depicting the situation where the user creates a new place on page <a href=\"https://227demo.djosv.com/places\">https://227demo.djosv.com/places</a>\nwhen writing something into the text field and clicking the <strong><em>submit</em></strong> button.</p>\n<p>If necessary, show operations on the browser or the server as comments on the diagram.</p>\n<p>The diagram does not have to be a sequence diagram.\nAny sensible way of presenting the events is fine.</p>\n<p>All necessary information for doing this, and the next two exercises, can be found in the text of <a href=\"/part0/fundamentals_of_web_apps#forms-and-http-post\">this part</a>.\nThe idea of these exercises is to <strong><em>read the text through once more and to think through what is going on there</em></strong>.\nReading the application <a href=\"https://github.com/comp227/example_app\">code</a> is not necessary, but it is of course possible.</p>\n<p><strong>Notice</strong> perhaps the best way to do diagrams is the <a href=\"https://github.com/mermaid-js/mermaid#sequence-diagram-docs---live-editor\">Mermaid</a>\nsyntax that is now implemented in <a href=\"https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/\">GitHub</a> markdown pages!</p>\n<h4>0.5: Single-page app diagram</h4>\n<p>Create a diagram depicting the situation where the user goes to the <a href=\"/part0/fundamentals_of_web_apps#single-page-app\">single-page app</a>\nversion of the places app at <a href=\"https://227demo.djosv.com/spa\">https://227demo.djosv.com/spa</a>.</p>\n<h4>0.6: New place in Single-page app diagram</h4>\n<p>Create a diagram depicting the situation where the user creates a new place using the single-page version of the app.</p>\n<p>This was the last exercise, so please hold on to them until we reach part c and then you can submit your answers there.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/b9999ec785b2c3bc6b8d3ef5d3537538/part-0.svg"},"part":0,"letter":"c","lang":"en"}}},"pageContext":{"part":0,"letter":"c","lang":"en"}}}